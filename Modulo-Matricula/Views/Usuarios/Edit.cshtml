@model Modulo_Matricula.Usuarios

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .myBtn {
        border: 1px solid #3f66fb;
        border-radius: 5px;
    }
</style>
<h2>Editar usuario</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.IdUsuario)

    <div class="form-group">
        @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Apellido, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Apellido, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Apellido, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Usuario, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Usuario, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Usuario, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Contrasena, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Contrasena, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Contrasena, "", new { @class = "text-danger" })
            <label style="margin-top: 1rem;" class="btn-default" id="mensaje">Debe ingresar una contraseña segura mayor a 8 dígitos, que contenga mayúsculas y minúsculas</label>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Estado, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Estado, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Estado, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Guardar cambios" class="btn btn-primary" />
        </div>
    </div>
    <script>
        let contrasena = document.getElementById("Contrasena");
        let mensaje = document.getElementById("mensaje");

        function ValidarContrasena() {
            var errors = [];
            if (contrasena.value.length < 8) {
                mensaje.innerHTML = "Debe ser mayor a 8 carácteres,";
                mensaje.setAttribute("class", "btn-danger");
                errors.push(mensaje.textContent);
            }
            if (contrasena.value.search(/[A-Z]/) < 0) {
                mensaje.innerHTML = "Debe contener mayúsculas,";
                mensaje.setAttribute("class", "btn-danger");
                errors.push(mensaje.textContent);
            }
            if (contrasena.value.search(/[a-z]/) < 0) {
                mensaje.innerHTML = "Debe contener minúsculas,";
                mensaje.setAttribute("class", "btn-danger");
                password.focus();
                errors.push(mensaje.textContent);
            }
            if (contrasena.value.search(/[0-9]/) < 0) {
                mensaje.innerHTML = "Debe contener al menos 1 digito,";
                mensaje.setAttribute("class", "btn-danger");
                errors.push(mensaje.textContent);
            }
            if (errors.length > 0) {
                mensaje.innerHTML = errors.join("\n");
                mensaje.setAttribute("class", "btn-danger");
                return false;
            } else {
                mensaje.innerHTML = "Contraseña es segura";
                mensaje.setAttribute("class", "btn-success");
            }
            return true;
        }
        contrasena.addEventListener("change", () => {
            ValidarContrasena();
        })
    </script>
</div>
}

<div class="btn btn-default myBtn">
    @Html.ActionLink("Regresar", "Index")
</div>
